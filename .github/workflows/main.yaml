name: Deploy to EC2 instances

on:
  push:
    branches: ["main"]

jobs:
  build-and-push-to-api-ecr:
    name: Build Docker Image and Push to api ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup aws ecr details
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login Into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build And Push Api Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.API_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  build-and-push-to-frontend-ecr:
    name: Build Docker Image and Push to frontend ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup aws ecr details
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login Into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build And Push frontend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.FRONTEND_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-api-to-ec2:
    name: Deploy api to EC2 Instance
    needs: build-and-push-to-api-ecr
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login Into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2 instances
        run: |
          command_id=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceids,Values=${{ vars.INSTANCE_1 }},${{ vars.INSTANCE_2 }}" \
          --comment "Pull and run Docker image" \
          --parameters commands='[
            "set -e",
            "echo Logging in to Amazon ECR...",
            "aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin '${{ steps.login-ecr.outputs.registry }}'",
            "echo Stopping existing container if running...",
            "docker stop ${{vars.CONTAINER_NAME}} || echo No container named  ${{vars.CONTAINER_NAME}} is running",
            "echo Pulling latest Docker image...",
            "docker pull '${{ steps.login-ecr.outputs.registry }}/${{ vars.API_REPO_NAME }}:$IMAGE_TAG'",
            "echo Running the container...",
            "docker run --rm -d -p 3000:3000 -e DB_HOST=${{secrets.DB_HOST}}  -e DB_USERNAME=${{secrets.DB_USERNAME}} -e DB_PASSWORD=${{secrets.DB_PASSWORD}} -e ENVIRONMENT=production  --name  ${{vars.CONTAINER_NAME}} '${{ steps.login-ecr.outputs.registry }}/${{ vars.API_REPO_NAME }}:$IMAGE_TAG'"
          ]' \
          --query "Command.CommandId" \
          --output text)
          aws ssm wait command-executed \
          --command-id $command_id \
          --instance-id ${{ vars.INSTANCE_1 }} || true
          aws ssm get-command-invocation \
          --command-id $command_id \
          --instance-id ${{ vars.INSTANCE_2 }} \
          --output json
          status=$(aws ssm list-commands --command-id $command_id --query "Commands[0].StatusDetails" --output text)
          if [ "$status" == "Success" ]; then
            echo "Command executed successfully."
          else
            echo "Command failed with status: $status"
            exit 1
          fi
  deploy-frontend-to-ec2:
    name: Deploy frontend to EC2 Instance
    needs: build-and-push-to-frontend-ecr
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login Into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2 instances
        run: |
          command_id=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceids,Values=${{ vars.INSTANCE_1 }},${{ vars.INSTANCE_2 }}" \
          --comment "Pull and run Docker image" \
          --parameters commands='[
            "set -e",
            "echo Logging in to Amazon ECR...",
            "aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin '${{ steps.login-ecr.outputs.registry }}'",
            "echo Stopping existing container if running...",
            "docker stop frontend || echo No container named frontend is running",
            "docker rm frontend || true",
            "echo Pulling latest Docker image...",
            "docker pull '${{ steps.login-ecr.outputs.registry }}/${{ vars.FRONTEND_REPO_NAME }}:$IMAGE_TAG'",
            "echo Running the container...",
            "docker run --rm -d -p 80:80 --name frontend '${{ steps.login-ecr.outputs.registry }}/${{ vars.FRONTEND_REPO_NAME }}:$IMAGE_TAG'"
          ]' \
          --query "Command.CommandId" \
          --output text)
          aws ssm wait command-executed \
          --command-id $command_id \
          --instance-id ${{ vars.INSTANCE_1 }} || true
          aws ssm get-command-invocation \
          --command-id $command_id \
          --instance-id ${{ vars.INSTANCE_2 }} \
          --output json
          status=$(aws ssm list-commands --command-id $command_id --query "Commands[0].StatusDetails" --output text)
          if [ "$status" == "Success" ]; then
            echo "Command executed successfully."
          else
            echo "Command failed with status: $status"
            exit 1
          fi
