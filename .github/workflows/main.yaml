name: Deploy to EC2 instances

on:
  push:
    branches: ['main']

jobs:
  build-and-push-to-ecr:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup aws ecr details
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login Into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build And Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ec2:
    name: Deploy to EC2 Instance
    needs: build-and-push-to-ecr
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login Into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2 instances
        run: |
          command_id=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceids,Values=i-0365b78f5dc2fc512,i-07f50ab667ebda06b" \
          --comment "Pull and run Docker image" \
          --parameters commands='[
            "aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
            "docker stop api || true",
            "docker pull ${{steps.login-ecr.outputs.registry}}/${{ vars.REPO_NAME }}:$IMAGE_TAG",
            "docker run --rm -d -p 3000:3000 --name api ${{steps.login-ecr.outputs.registry}}/${{ vars.REPO_NAME }}:$IMAGE_TAG"
          ]' \
          --query "Command.CommandId" \
          --output text)
          aws ssm wait command-executed \
          --command-id $command_id \
          --instance-id i-0365b78f5dc2fc512 || true
          aws ssm get-command-invocation \
          --command-id $command_id \
          --instance-id i-0365b78f5dc2fc512 \
          --output json
          status=$(aws ssm list-commands --command-id $command_id --query "Commands[0].StatusDetails" --output text)
          if [ "$status" == "Success" ]; then
            echo "Command executed successfully."
          else
            echo "Command failed with status: $status"
            exit 1
          fi
